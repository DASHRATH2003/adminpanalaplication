import React, { useState, useEffect } from 'react';
import { Plus, Edit, Trash2, RefreshCw } from 'lucide-react';
import { subUnderCategoryService, subCategoryService } from '../firebase/services';

const SubUnderCategory = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [subUnderCategories, setSubUnderCategories] = useState([]);
  const [subCategories, setSubCategories] = useState([]);
  const [loading, setLoading] = useState(false);
  const [selectedSubUnderCategory, setSelectedSubUnderCategory] = useState(null);
  const [formData, setFormData] = useState({
    subCategoryId: '',
    name: '',
    date: new Date().toISOString().split('T')[0]
  });

  useEffect(() => {
    fetchAllData();
  }, []);

  const fetchAllData = async (showLoader = false) => {
    try {
      if (showLoader) {
        setLoading(true);
      }
      const [subUnderCategoriesData, subCategoriesData] = await Promise.all([
        subUnderCategoryService.getAll(),
        subCategoryService.getAll()
      ]);
      setSubUnderCategories(subUnderCategoriesData);
      setSubCategories(subCategoriesData);
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      if (showLoader) {
        setLoading(false);
      }
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    
    if (name === 'subCategoryId' && value) {
      // Find selected sub category
      const selectedSubCategory = subCategories.find(subCat => subCat.id === value);
      if (selectedSubCategory) {
        // Generate automatic name based on sub category
        const autoGeneratedName = `${selectedSubCategory.name} Under Category`;
        setFormData(prev => ({
          ...prev,
          [name]: value,
          name: autoGeneratedName
        }));
        return;
      }
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (selectedSubUnderCategory) {
        // Update existing sub under category
        await subUnderCategoryService.update(selectedSubUnderCategory.id, formData);
        console.log('Sub Under Category updated successfully');
      } else {
        // Add new sub under category
        const dataToSubmit = {
          ...formData,
          date: new Date().toISOString()
        };
        await subUnderCategoryService.add(dataToSubmit);
        console.log('Sub Under Category added successfully');
      }
      
      setIsModalOpen(false);
      setSelectedSubUnderCategory(null);
      setFormData({
        subCategoryId: '',
        name: '',
        date: new Date().toISOString().split('T')[0]
      });
      fetchAllData();
    } catch (error) {
      console.error('Error saving sub under category:', error);
    }
  };

  const handleCancel = () => {
    setIsModalOpen(false);
    setSelectedSubUnderCategory(null);
    setFormData({
      subCategoryId: '',
      name: '',
      date: new Date().toISOString().split('T')[0]
    });
  };

  const handleDelete = async (id) => {
    if (window.confirm('Are you sure you want to delete this sub under category?')) {
      try {
        await subUnderCategoryService.delete(id);
        console.log('Sub Under Category deleted successfully');
        fetchAllData();
      } catch (error) {
        console.error('Error deleting sub under category:', error);
      }
    }
  };

  const handleEdit = (subUnderCategory) => {
    setSelectedSubUnderCategory(subUnderCategory);
    setFormData({
      subCategoryId: subUnderCategory.data.subCategoryId || '',
      name: subUnderCategory.data.name || ''
    });
    setIsModalOpen(true);
  };

  const handleRefresh = () => {
    fetchAllData(true);
  };

  const getSubCategoryName = (subCategoryId) => {
    const subCategory = subCategories.find(sc => sc.id === subCategoryId);
    return subCategory ? subCategory.name : 'Unknown';
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="p-4 lg:p-6 bg-gray-900 h-full">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-semibold text-white">Sub Under Categories</h2>
        <div className="flex items-center space-x-3">
          <button
            onClick={() => setIsModalOpen(true)}
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
          >
            <Plus size={20} />
            <span>Add Sub Under Category</span>
          </button>
          <button
            onClick={handleRefresh}
            className="bg-gray-700 hover:bg-gray-600 text-white p-2 rounded-lg transition-colors"
          >
            <RefreshCw size={20} />
          </button>
        </div>
      </div>

      <div className="mb-4">
        <h3 className="text-lg font-medium text-white mb-4">My Sub Under Categories</h3>
      </div>

      <div className="bg-gray-800 rounded-lg overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-700">
              <tr>
                <th className="px-6 py-4 text-left text-sm font-medium text-gray-300">Sub Category</th>
                <th className="px-6 py-4 text-left text-sm font-medium text-gray-300">Sub Under Category Name</th>
                <th className="px-6 py-4 text-left text-sm font-medium text-gray-300">Actions</th>
              </tr>
            </thead>
            <tbody>
              {loading ? (
                <tr>
                  <td colSpan="3" className="px-6 py-12 text-center text-gray-400">
                    Loading sub under categories...
                  </td>
                </tr>
              ) : subUnderCategories.length === 0 ? (
                <tr>
                  <td colSpan="3" className="px-6 py-12 text-center text-gray-400">
                    No sub under categories available
                  </td>
                </tr>
              ) : (
                subUnderCategories.map((subUnderCategory) => (
                  <tr key={subUnderCategory.id} className="border-b border-gray-700 hover:bg-gray-700">
                    <td className="px-6 py-4 text-sm text-gray-300">
                      {getSubCategoryName(subUnderCategory.data.subCategoryId)}
                    </td>
                    <td className="px-6 py-4 text-sm text-gray-300">
                      {subUnderCategory.data.name}
                    </td>
                    <td className="px-6 py-4 text-sm font-medium space-x-2">
                      <button
                        onClick={() => handleEdit(subUnderCategory)}
                        className="text-blue-400 hover:text-blue-300 transition-colors"
                      >
                        <Edit size={16} />
                      </button>
                      <button
                        onClick={() => handleDelete(subUnderCategory.id)}
                        className="text-red-400 hover:text-red-300 transition-colors"
                      >
                        <Trash2 size={16} />
                      </button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>

      {/* Modal */}
      {isModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-gray-800 rounded-lg p-6 w-full max-w-md">
            <h2 className="text-xl font-bold mb-4 text-white">
              {selectedSubUnderCategory ? 'Edit Sub Under Category' : 'Add Sub Under Category'}
            </h2>
            
            <form onSubmit={handleSubmit}>
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Sub Category
                </label>
                <select
                  name="subCategoryId"
                  value={formData.subCategoryId}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                >
                  <option value="">Select Sub Category</option>
                  {subCategories.map((subCategory) => (
                    <option key={subCategory.id} value={subCategory.id}>
                      {subCategory.name}
                    </option>
                  ))}
                </select>
              </div>
              
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Sub Under Category Name
                </label>
                <input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
              </div>
              

              
              <div className="flex justify-end space-x-2">
                <button
                  type="button"
                  onClick={handleCancel}
                  className="px-4 py-2 text-gray-300 border border-gray-600 rounded-md hover:bg-gray-700 transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                >
                  {selectedSubUnderCategory ? 'Update' : 'Submit'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default SubUnderCategory;